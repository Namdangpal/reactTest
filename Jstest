/**
 * 주기 판단 헬퍼: 해당 Date가 어떤 주기에 속하는지 반환
 * @param {Date} date
 * @returns {{ month:number, cycles: string[] }} cycles: ['M','Q','H','Y'] 등
 */
function getCyclesForDate(date) {
  const month = date.getMonth() + 1;
  const cycles = [];

  // 월간은 항상 포함
  cycles.push("M");

  // 분기: 3,6,9,12 (month % 3 === 0)
  if (month % 3 === 0) cycles.push("Q");

  // 반기: 6,12 (month % 6 === 0)
  if (month % 6 === 0) cycles.push("H");

  // 연간: 12
  if (month === 12) cycles.push("Y");

  return { month, cycles };
}

/**
 * 기준일(일)을 유지하면서 startMonth ~ endMonth 사이의 실행일 리스트 생성
 * 및 각 실행일이 어떤 주기들에 포함되는지 함께 반환
 *
 * @param {string|Date} baseDate - 기준일 (예: '2025-01-25' 또는 Date)
 * @param {string} startMonth - 'YYYY-MM' (포함)
 * @param {string} endMonth - 'YYYY-MM' (포함)
 * @returns {Array} [
 *   { seq:1, execDate:'2025-01-25', year:2025, month:1, cycles:['M','Q'] }
 * ]
 */
export function generateExecutionWithCycles(baseDate, startMonth, endMonth) {
  const base = new Date(baseDate);
  const baseDay = base.getDate();

  const [sY, sM] = startMonth.split("-").map(Number);
  const [eY, eM] = endMonth.split("-").map(Number);

  // startDate = sY-sM-baseDay (but 보정 필요)
  const results = [];
  let seq = 1;

  // iterate year-month from start to end inclusive
  let curYear = sY;
  let curMonth = sM;

  const cmp = (y1, m1, y2, m2) => (y1 < y2) || (y1 === y2 && m1 <= m2);

  while (cmp(curYear, curMonth, eY, eM)) {
    // 월의 마지막 일 계산 (0일을 이용한 trick)
    const lastDayOfMonth = new Date(curYear, curMonth, 0).getDate();
    const day = Math.min(baseDay, lastDayOfMonth);

    const execDate = new Date(curYear, curMonth - 1, day);

    const { month, cycles } = getCyclesForDate(execDate);

    results.push({
      seq: seq++,
      execDate: execDate.toISOString().split("T")[0], // YYYY-MM-DD
      year: curYear,
      month,
      cycles, // ex ['M','Q']
      cyclesLabel: cycles.map(c => ({
        M: "월간",
        Q: "분기",
        H: "반기",
        Y: "연간"
      }[c] || c))
    });

    // next month
    curMonth += 1;
    if (curMonth > 12) {
      curMonth = 1;
      curYear += 1;
    }
  }

  return results;
}
